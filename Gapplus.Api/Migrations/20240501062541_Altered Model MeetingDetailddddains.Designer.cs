// <auto-generated />
using System;
using BarcodeGenerator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gapplus.Api.Migrations
{
    [DbContext(typeof(UsersContext))]
    [Migration("20240501062541_Altered Model MeetingDetailddddains")]
    partial class AlteredModelMeetingDetailddddains
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("BarcodeGenerator.Models.AGMQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeedback")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<string>("ReplyToEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplyToMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplyToName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShareholderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ShareholderNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("holding")
                        .HasColumnType("REAL");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shareholderquestion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AGMQuestions");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AGMTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("idenity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppLogs");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.BarcodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AddedSplitAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("BarcodeImage")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Clikapad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Consolidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConsolidatedParent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsolidatedValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Holding")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotVerifiable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnlineEventUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentAccountNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Preregistered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PresentByProxy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Proxyupload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegCode")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sessionid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TakePoll")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UserLoginHistory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("accesscode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("combined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<string>("passwordToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("resolution")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("split")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BarcodeStore");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Destination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Messagesid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("messageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Messagesid");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Facilitators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("BarcodeImage")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilitatorCompany")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineEventUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sessionid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("UserLoginHistory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("accesscode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Facilitators");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.FacilitatorsArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("BarcodeImage")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilitatorCompany")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineEventUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("accesscode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FacilitatorsArchive");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.KeypadResults", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Keypad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyvalue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeReceived")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Valuechecked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("voteReceived")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("KeypadResults");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.MailSettings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SentFrom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("smtpHost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("smtpPort")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("mailsettings");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Messages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("callbackData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("flash")
                        .HasColumnType("INTEGER");

                    b.Property<string>("from")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("intermediateReport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("notifyContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("notifyUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sendAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("transliteration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("validityPeriod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.PresentArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clikapad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GivenClikapad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Holding")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<byte>("PermitPoll")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PresentTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReturnedClikapad")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TakePoll")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("admitSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("newNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("preregistered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("proxy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("split")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PresentArchive");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.PresentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Clikapad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("GivenClikapad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Holding")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<byte>("PermitPoll")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PresentTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReturnedClikapad")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TakePoll")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("admitSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("newNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("preregistered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("proxy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("split")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Present");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.ProxyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Holding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PercentageHolding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PresentTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShareholderNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TakePoll")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("newNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("proxy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("split")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Proxy");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Proxylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Validity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProxyList");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("questionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("syncStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("voteType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.QuestionArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("questionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("syncStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("QuestionArchive");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Clickapad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Holding")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<bool>("Pregistered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PresentByProxy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VoteAbstain")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("VoteAgainst")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoteChoice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VoteFor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoteStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VoteVoid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("splitValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.ResultArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Clickapad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Holding")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ParentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.Property<bool>("Present")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PresentByProxy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VoteAbstain")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("VoteAgainst")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("VoteFor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoteStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VoteVoid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("splitValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ResultArchive");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SMSDeliveryLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("deliveryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("smsCount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SMSDeliveryLog");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SMSResult", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cleanText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("from")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("keyword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("messageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("receivedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("smsCount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SMSResult");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SettingsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AbstainBtnChoice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AdmittanceDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgmDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AgmEnd")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AgmEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AgmStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ArchiveStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CountDownValue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MessagingChoice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnlineUrllink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PreregisteredVotes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintOutTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProxyVoteResult")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegCode")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ShareHolding")
                        .HasColumnType("REAL");

                    b.Property<bool>("StartAdmittance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StartVoting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StopAdmittance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StopVoting")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SyncChoice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalRecordCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteAbstaincolorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteAgainstColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteForColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteVoidColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("When")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("allChannels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("feebackCCEmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("feebackEmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("mobileChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("proxyChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("smsChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ussdChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("webChannel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SettingsModelArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AGMID")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AbstainBtnChoice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AdmittanceDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgmDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AgmEnd")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AgmEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AgmStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ArchiveStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OnlineUrllink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PreregisteredVotes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrintOutTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegCode")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ShareHolding")
                        .HasColumnType("REAL");

                    b.Property<bool>("StartAdmittance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StopAdmittance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SyncChoice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalRecordCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteAbstaincolorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteAgainstColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteForColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VoteVoidColorBg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("When")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("allChannels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("feebackCCEmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("feebackEmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("mobileChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("proxyChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("smsChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ussdChannel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("webChannel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SettingsArchive");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.ShareholderFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("When")
                        .HasColumnType("TEXT");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShareholderFeedback");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.UploadDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Holding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PercentageHolding")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ShareholderNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UploadDatabase");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompanyCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyRegNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompanyUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.Meeting", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MeetingCreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingDetailsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MeetingUpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("MeetingId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.MeetingDetails", b =>
                {
                    b.Property<Guid>("MeetingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingSettingsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("agenda")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("encrypted_password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("h323_password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("host_email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("host_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("join_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("pre_schedule")
                        .HasColumnType("INTEGER");

                    b.Property<string>("pstn_password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("TEXT");

                    b.Property<string>("start_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MeetingDetailsId");

                    b.HasIndex("MeetingId")
                        .IsUnique();

                    b.HasIndex("MeetingSettingsId");

                    b.ToTable("MeetingDetails");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.MeetingRegistration", b =>
                {
                    b.Property<Guid>("ShareHolderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("TEXT");

                    b.Property<long>("MeetingNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShareHolderId", "MeetingId");

                    b.ToTable("MeetingRegistrations");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.MeetingSettings", b =>
                {
                    b.Property<Guid>("MeetingSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingDetaildId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("allow_multiple_devices")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("alternative_host_update_polls")
                        .HasColumnType("INTEGER");

                    b.Property<string>("alternative_hosts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("alternative_hosts_email_notification")
                        .HasColumnType("INTEGER");

                    b.Property<int>("approval_type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("audio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("auto_recording")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("auto_start_meeting_summary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("close_registration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("cn_meeting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("device_testing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("email_in_attendee_report")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("email_notification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("enable_dedicated_group_chat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("encryption_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("enforce_login")
                        .HasColumnType("INTEGER");

                    b.Property<string>("enforce_login_domains")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("focus_mode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("host_save_video_order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("host_video")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("in_meeting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("internal_meeting")
                        .HasColumnType("INTEGER");

                    b.Property<int>("jbh_time")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("join_before_host")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("meeting_authentication")
                        .HasColumnType("INTEGER");

                    b.Property<string>("meeting_invitees")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("mute_upon_entry")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("participant_focused_meeting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("participant_video")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("private_meeting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("push_change_to_calendar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("registrants_confirmation_email")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("registrants_email_notification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("request_permission_to_unmute_participants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("resources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("show_join_info")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("show_share_button")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("use_pmi")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("waiting_room")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("watermark")
                        .HasColumnType("INTEGER");

                    b.HasKey("MeetingSettingsId");

                    b.HasIndex("MeetingDetaildId")
                        .IsUnique();

                    b.ToTable("MeetingSettings");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.ShareHolder", b =>
                {
                    b.Property<Guid>("ShareHolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConsolidationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interests")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sessionid")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShareHolderNum")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ShareHolderId");

                    b.ToTable("ShareHolders");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.ShareHolderCompanyRelationShip", b =>
                {
                    b.Property<Guid>("ShareHolderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Holdings")
                        .HasColumnType("REAL");

                    b.Property<double>("PercentageHolding")
                        .HasColumnType("REAL");

                    b.HasKey("ShareHolderId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ShareHolderCompanies");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Destination", b =>
                {
                    b.HasOne("BarcodeGenerator.Models.Messages", null)
                        .WithMany("destinations")
                        .HasForeignKey("Messagesid");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Result", b =>
                {
                    b.HasOne("BarcodeGenerator.Models.Question", null)
                        .WithMany("result")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SMSDeliveryLog", b =>
                {
                    b.HasOne("BarcodeGenerator.Models.Question", null)
                        .WithMany("SMSdeliveryLog")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.SMSResult", b =>
                {
                    b.HasOne("BarcodeGenerator.Models.Question", null)
                        .WithMany("SMSResult")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.Meeting", b =>
                {
                    b.HasOne("Gapplus.Domain.Models.Base.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.MeetingDetails", b =>
                {
                    b.HasOne("Gapplus.Domain.Models.Base.Meeting", "Meeting")
                        .WithOne("MeetingDetails")
                        .HasForeignKey("Gapplus.Domain.Models.Base.MeetingDetails", "MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gapplus.Domain.Models.Base.MeetingSettings", "MeetingSettings")
                        .WithMany()
                        .HasForeignKey("MeetingSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("MeetingSettings");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.MeetingSettings", b =>
                {
                    b.HasOne("Gapplus.Domain.Models.Base.MeetingDetails", "MeetingDetails")
                        .WithOne()
                        .HasForeignKey("Gapplus.Domain.Models.Base.MeetingSettings", "MeetingDetaildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingDetails");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.ShareHolderCompanyRelationShip", b =>
                {
                    b.HasOne("Gapplus.Domain.Models.Base.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Messages", b =>
                {
                    b.Navigation("destinations");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.Question", b =>
                {
                    b.Navigation("SMSResult");

                    b.Navigation("SMSdeliveryLog");

                    b.Navigation("result");
                });

            modelBuilder.Entity("Gapplus.Domain.Models.Base.Meeting", b =>
                {
                    b.Navigation("MeetingDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
