@{
    Layout = null;
}
@{
    Layout = null;



    var header = new Gapplus.Web.DTO.ShareHolder.ShareHolderDashboardHeaderDto();



    header.Username = @ViewBag.Name;



    header.Email = @ViewBag.Email;
}

<html class="overflow-x-hidden">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
<script src="~/Plugins/Utils/UtilityFunctions.js"></script>
    <script src="~/Plugins/Tailwind/tailwind.js"></script>
    <script src="~/Plugins/Tailwind/config.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap"
        rel="stylesheet" />
</head>

<body class="overflow-x-hidden" id="mainBody">
<section class="md:px-[100px] px-[20px] py-[20px] ">
@Html.Partial("_DashBoardHeader", header)
    @Html.Partial("_BannerPage")
    <section class="relative">

        @* @Html.Partial("_AgmRegistrationWizard") *@

        <div class="absolute right-0 flex items-center flex-col mb-[30px] top-5 ">
            <img src="~/Plugins/Images/wizard-0.png" alt="" id="wizardImage" class=" w-[60px] mb-[5px]">
            @* <img src="~/Plugins/Images/wizard-0.png" alt="" class="t w-[60px] mb-[5px]"> *@
            <p class="text-[9px] font-[900]">Register your details</p>
        </div>


        <div class="flex flex-col items-center justify-center py-[80px]  w-[90%] md:w-[500px] mx-auto">

            <h2 class="font-[900] text-[15px] text-shrink text-center">
                Register Coronation E-Meeting
            </h2>
            <p class="text-[13px] text-center text-lightBlue mb-[20px]">This service is only available to shareholders.
            </p>
            <form action="" enctype="multipart/form-data"
                class=" mt-[10px] w-full flex flex-col justify-center items-center px-[40px]" id="partialContainer">
                
                <partial name="_AgmRegisterPage1" />



            </form>
        </div>
    </section>
</section>
    

    @Html.Partial("_Footer")
</body>


<script>
    var data = {};





    //VALIDATIONS 

    function validateField(field) {
        if (field.value == null || field.value.trim() == "") {
            return false;
        }
        return true;
    }

    function performDataValidationAndRestore() {
        var page = currentPage;
        var fields = [];
        console.log(currentPage)
        console.log(data);

        if (currentPage == 1) {
            var firstname = getOrSetElement("firstName", data.firstName);
            var lastName = getOrSetElement("lastName", data.lastName);
            var email = getOrSetElement("email", data.email);
            var phoneNumber = getOrSetElement("phoneNumber", data.phoneNumber);
            fields.push(firstname, lastName, email, phoneNumber);
    @* setCriteriaForIncrement(data.firstName,data.lastName,data.email,data.phoneNumber); *@
                setCriteriaForIncrement(data.firstName, data.lastName, data.email, data.phoneNumber);
            console.log(data);
        }


        if (currentPage == 2) {
            console.log(data)
            var shareHolderCertificate = getOrSetFileDisplayName("shareHolderCertificate", data.shareHolderCertificate);
            var shareHolderPassport = getOrSetFileDisplayName("shareHolderPassport", data.shareHolderPassport);
            var identificationNumber = getOrSetElement("identificationNumber", data.identificationNumber);
            fields.push(shareHolderCertificate, shareHolderPassport, identificationNumber);
            setCriteriaForIncrement(data.shareHolderCertificate.name, data.shareHolderPassport.name, identificationNumber.value);
    @* setCriteriaForIncrement(data.firstName,data.lastName,data.email,data.phoneNumber); *@

                console.log(data);
        }


        if (currentPage == 3) {
            console.log(data)
            var proxySelection = getOrSetCheckedElement("proxySelection", data.proxySelection);
            fields.push(proxySelection);
            setCriteriaForIncrement(data.proxySelection);

            console.log(data);
        }


        if (currentPage == 4) {
            console.log(data)
            var proxySelection = getOrSetRadioElement(data.attendType);
            fields.push(proxySelection);
            setCriteriaForIncrement(data.attendType);
            console.log(data);
        }


        if (currentPage == 5) {
            console.log(data);
            setConfirmData("firstName", data.firstName);
            setConfirmData("lastName", data.lastName);
            setConfirmData("email", data.email);
            setConfirmData("phoneNumber", data.phoneNumber);
            setConfirmData("certificate", data.shareHolderCertificate.name);
            setConfirmData("passport", data.shareHolderPassport.name);
            setConfirmData("identification", data.identificationNumber);
            setConfirmData("proxy", data.proxySelection ? "None" : "Proxy Selected");
            setConfirmData("proxySummary", data.proxySelection ? "Proxy not needed" : "The following meeting will be attended via proxy");

            let radioName = data.attendType;
            let trimmedName = radioName.substring(0, radioName.length - 5);

            setConfirmData("attendanceType", trimmedName);


    @* var proxySelection=getOrSetRadioElement(data.attendType);
                fields.push(proxySelection);
                console.log(data); *@
    }


        fields.forEach(x => {
            if (x != null) {
                let check = validateField(x);
                if (!check) {
                    throw new Error("INVALID DATA PASSED || ONE OR MORE FIELDS IS REQUIRED")
                }
            }
        });







    }







    function showPageWithData() {

    }






    var group = {};

    function setCriteriaForIncrement(...items) {
        let currentArray = [];
        items.forEach(x => {
            if (x !== null && x !== undefined && x.trim() !== "") {
                currentArray.push(x);
            }
        });
        group[currentPage] = currentArray;
        console.log(group);
    }

    function checkPageAndCheckGroupItemsWhetherToIncrement() {
        let currentGroup = group[currentPage];
        console.log(group);
        let wizardImage = document.getElementById("wizardImage");
        var imageUrl = wizardImage.src;

        // Extract the current page number from the image URL
        let imageNumber = parseInt(imageUrl.match(/wizard-(\d+)/)[1]);

        let check = true;
        currentGroup.forEach(x => {
            if (x == null || x.trim() == "" || x == undefined) {
                check = false;
            }
        });

        if (check) {
            incrementWizard();
        } else if (imageNumber <= 0 || imageNumber == null) {
            return;
        } else if (!check) {
            decrementWizard();
        }
    }

    function constantlyCheckAndUpdateWizard() {
        checkPageAndCheckGroupItemsWhetherToIncrement();
    }






    @*
        setInterval(constantlyCheckAndUpdateWizard, 10000); *@


























    @*
        var group={};






        function setCriteriaForIncrement(...items) {
        let currentArray=[];
        items.forEach(x=>{
        if(x!=null||x!=undefined){
        currentArray.push(x);
        }
        })
        group[currentPage] = currentArray;
        console.log(group);
        }






        {

        }


        function checkPageAndCheckGroupItemsWhetherToIncrement()
        {
        let currentGroup=group[currentPage];
        console.log(group)
        let wizardImage = document.getElementById("wizardImage");
        var imageUrl = wizardImage.src;

        // Extract the current page number from the image URL
        let imageNumber = parseInt(imageUrl.match(/wizard-(\d+)/)[1]);


        let check=true;
        currentGroup.forEach(x=>{
        if(x==null||x.trim()==""||x==undefined){
        check=false;
        }
        })


        if(check==true&&imageNumber<currentPage){
        incrementWizard();
        }
        else if(imageNumber<=0||imageNumber==null){
        return;
        }
        else if(imageNumber>currentPage&&check==false){
        decrementWizard();
        }
        }









        function constantlyCheckAndUpdateWizard() {
        for (const key in group) {
        if (Object.hasOwnProperty.call(group, key)) {

        @* setCriteriaForIncrement(...group[key]);
        }
        }
        }
        *@

        function Register() {


            console.log("started register function");
            const fd = new FormData();
            fd.append("ShareHolderCertificate", data.shareHolderCertificate, data.shareHolderCertificate.name);
            fd.append("ShareHolderPassport", data.shareHolderPassport, data.shareHolderPassport.name);

                fd.append("AttendType", data.attendType);
            fd.append("PhoneNumber", data.phoneNumber);
            fd.append("ProxySelection", String(data.proxySelection));
            fd.append("Email", data.email);
            fd.append("FirstName", data.firstName);
            fd.append("IdentificationNumber", data.identificationNumber);
            fd.append("LastName", data.lastName);
            console.log(fd);

    
showActivityIndicatorForPage(null,20)
                // Upload the FormData object:
                fetch('http://localhost:5069/api/AGMRegistration/Register', {
                    method: "POST",
                    body: fd,
                })
                    .then(res => {
            return res;
                    }

                    )
                    .then(res => {
                        console.log(res);
                        window.location.href = "/ShareHolder/SuccessPage";


                    }


                    )
        }








    @*
        setInterval(checkPageAndCheckGroupItemsWhetherToIncrement,1000);
        *@











        function decrementWizard() {
            let wizardImage = document.getElementById("wizardImage");
            var imageUrl = wizardImage.src;

            // Extract the current page number from the image URL
            let currentPageNumber = parseInt(imageUrl.match(/wizard-(\d+)/)[1]);

            // Check if the current page number is greater than 0
            if (currentPageNumber > 0) {
                // Decrement the current page number by 20
                let newPageNumber = currentPageNumber - 20;

                // Update the image URL with the new page number
                let newImageUrl = imageUrl.replace(`wizard-${currentPageNumber}`, `wizard-${newPageNumber}`);

                // Set the updated image URL to the image element
                wizardImage.src = newImageUrl;

                console.log(newImageUrl);
            }
        }




    function incrementWizard() {
        let wizardImage = document.getElementById("wizardImage");
        var imageUrl = wizardImage.src;

        // Extract the current page number from the image URL
        let currentPageNumber = parseInt(imageUrl.match(/wizard-(\d+)/)[1]);

        // Increment the current page number by 20
        let newPageNumber = currentPageNumber + 20;

        // Update the image URL with the new page number
        let newImageUrl = imageUrl.replace(`wizard-${currentPageNumber}`, `wizard-${newPageNumber}`);

        // Set the updated image URL to the image element
        wizardImage.src = newImageUrl;

        console.log(newImageUrl);
    }

    @* incrementWizard(); *@


        function setConfirmData(id, data) {
            var element = document.getElementById(`${id}ConfirmDisplay`);
            if (element != null) {
                element.innerHTML = data;
            }
        }

    function getOrSetRadioElement(itemToBeChecked = null) {

        var element = document.getElementById(itemToBeChecked);
        console.log(element)
        if (itemToBeChecked !== null) {
            element.checked = true;
        }
        return element;
    }

    function getOrSetCheckedElement(id, preferredValue = null) {
        var element = document.getElementById(id);
        if (preferredValue !== null) {
            element.checked = preferredValue;
        }
        return element;
    }


    function getOrSetElement(id, preferredValue = null) {
        var element = document.getElementById(id);
        if (preferredValue !== null) {
            element.value = preferredValue;
        }
        return element;
    }







    function getOrSetFileDisplayName(id, preferredValue = null) {
        var element = document.getElementById(`${id}DisplayName`);
        if (preferredValue !== null) {
            if (element != null) {
                element.value = preferredValue.name;
            }
        }

    }

















    var currentPage = 1;

    function showPage(page) {
        let pageNum = page;
        currentPage = page;
        console.log("showing page" + page)

        // Check if pageNum is valid
        if (!(pageNum > 0 && pageNum <= 4)) {
            return;
        }

        // Create a new XMLHttpRequest object
        try {
            var xhr = new XMLHttpRequest();
    @* var dejinp = document.getElementById("dej"); *@
                // Configure the request
                xhr.open("GET", `/ShareHolder/GetAgmRegisterPartialView?PageNum=${pageNum}`, true);

            // Set up a callback function to handle the response
            xhr.onload = function () {
                if (xhr.status === 200) {
                    let wizardImage = document.getElementById("wizardImage");
                    let p = (currentPage * 2) - 2;
                    console.log("pnum", p);
                    // Update the container with the partial view HTML
                    document.getElementById("partialContainer").innerHTML = xhr.responseText;
                    wizardImage.setAttribute("src", `/Plugins/Images/wizard-${p != 0 ? p : ""}0.png`);
                    performDataValidationAndRestore();


                } else {
                    // Handle error if any
                    console.error("Request failed. Status: " + xhr.status);
                }
            };

            // Send the request
            xhr.send();
        }
        catch (e) {
            console.error(e)
        }

    }



    function showReviewAndConfirmPage() {
        showNextPage();
        console.log("pageis cirr", currentPage)



        try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", `/ShareHolder/GetReviewAndConfirmPartialView`, true);

            // Set up a callback function to handle the response
            xhr.onload = function () {
                if (xhr.status === 200) {
                    // Update the container with the partial view HTML
                    document.getElementById("mainBody").innerHTML = xhr.responseText;
                    performDataValidationAndRestore();

                } else {
                    // Handle error if any
                    console.error("Request failed. Status: " + xhr.status);
                }
            };

            // Send the request
            xhr.send();
        }
        catch (e) {
            console.error(e);
        }

    }



    function showPreviousPage() {
        if (currentPageIsValid()) {
            currentPage--;
            showPage(currentPage);
        }
    }

    function showNextPage() {
        console.log(currentPage)
        currentPage++;
        if (currentPageIsValid()) {
            showPage(currentPage);
        }
    }

    function currentPageIsValid() {
        return currentPage > 0 && currentPage <= 4;
    }






























    function setData(key = null, value = null) {
        if (key != null && value != null && key.trim() !== "") {
            data[key] = value;
        }
    }





    function addFileData(x, key = "file") {
        const file = x.files[0];

        console.log(file);
        var displayElement = document.getElementById(`${key}DisplayName`);
        if (displayElement != null) {
            displayElement.value = file.name;
        }
        // Create a FormData object
    @* const formData = new FormData(); *@

            // Append the file to the FormData object
    @* formData.append(key, file); *@

    @* console.log(formData); *@
            setData(key, file);
        console.log(x);
        return;
        // Make a POST request to the API endpoint
        fetch('https://example.com/api/upload', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('File uploaded successfully:', data);
            })
            .catch(error => {
                console.error('There was a problem uploading the file:', error);
            });




    }





    function addCheckData(x, key = null) {
        setData(key, x.checked);
        console.log(data);
    }

    function addRadioData(radioButton, key = null) {
        if (radioButton.checked) {
    @* setData(key, radioButton.value); *@
                setData(key, radioButton.id);
            console.log(data);
        }
    }


    function addData(x, key = null) {
        setData(key, x.value);
        console.log(data);
    }

</script>


</html>